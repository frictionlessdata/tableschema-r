% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/field.R
\docType{class}
\name{Field}
\alias{Field}
\title{Field class}
\format{
\code{\link{R6Class}} object.
}
\usage{
# Field$new(descriptor, missingValues = list(""))
}
\arguments{
\item{descriptor}{Schema field descriptor.}

\item{missingValues}{A list with vector strings representing missing values.}
}
\value{
Object of class \code{\link{R6Class}}.
}
\description{
Class representing a field in the schema.

Data values can be cast to native R types. Casting a value checks whether it is of the expected type, in the correct format, and compliant with any constraints imposed by the schema.
}
\details{
A field descriptor \code{MUST} be a JSON object that describes a single field. The descriptor provides both human-readable documentation and machine-readable validation rules. It may also guide user interface generation for data entry.

The descriptor \code{object} \code{MAY} include additional custom properties. Of these, only the \code{name} property is \code{REQUIRED}.

\describe{
  \item{\code{name}}{The descriptor \code{MUST} contain a \code{name} property, typically corresponding to the column name in the data file. This name \code{SHOULD} be unique, and while not case-sensitive for uniqueness, preserving case is advisable.}
  \item{\code{title}}{A human-readable label for the field.}
  \item{\code{description}}{A text description of the field, e.g., "The recipient of the funds".}
}
}
\section{Methods}{

\describe{
  \item{\code{Field$new(descriptor, missingValues = list(""))}}{Constructor to instantiate the \code{Field} class. Accepts the following arguments:
    \describe{
      \item{\code{descriptor}}{Schema field descriptor.}
      \item{\code{missingValues}}{A list of strings representing missing values.}
      \item{\code{TableSchemaError}}{Raised if an error occurs during instantiation.}
      \item{\code{Field}}{Returns a \code{Field} class instance.}
    }
  }

  \item{\code{cast_value(value, constraints = TRUE)}}{Casts a given value according to the field's type and format.
    \describe{
      \item{\code{value}}{Value to cast.}
      \item{\code{constraints}}{Logical or list of constraints to apply.}
      \item{\code{errors$TableSchemaError}}{Raised if casting fails due to a constraint violation.}
      \item{\code{any}}{Returns the cast value.}
    }
  }

  \item{\code{testValue(value, constraints = TRUE)}}{Tests if a value complies with the field definition.
    \describe{
      \item{\code{value}}{Value to test.}
      \item{\code{constraints}}{Constraints configuration.}
      \item{\code{Boolean}}{Returns \code{TRUE} if the value is compliant.}
    }
  }
}
}

\section{Properties}{

\describe{
  \item{\code{name}}{Returns the field name.}
  \item{\code{type}}{Returns the field type.}
  \item{\code{format}}{Returns the field format.}
  \item{\code{required}}{Returns \code{TRUE} if the field is required.}
  \item{\code{constraints}}{Returns a list of field constraints.}
  \item{\code{descriptor}}{Returns the field descriptor.}
}
}

\section{Language}{

The key words \code{MUST}, \code{MUST NOT}, \code{REQUIRED}, \code{SHALL}, \code{SHALL NOT}, \code{SHOULD}, \code{SHOULD NOT}, \code{RECOMMENDED}, \code{MAY}, and \code{OPTIONAL} in this documentation are to be interpreted as described in \href{https://www.ietf.org/rfc/rfc2119.txt}{RFC 2119}.
}

\examples{
DESCRIPTOR = list(name = "height", type = "number")

field <- Field$new(descriptor = DESCRIPTOR)

# get correct instance
field$name
field$format
field$type

# return true on test
field$testValue(1)

# cast value
field$cast_value(1)

# expand descriptor by defaults
field <- Field$new(descriptor = list(name = "name"))

field$descriptor


# parse descriptor with "enum" constraint
field <- Field$new(descriptor = list(name = "status", type = "string", 
                   constraints = list(enum = list('active', 'inactive'))))

field$testValue('active')
field$testValue('inactive')
field$testValue('activia')
field$cast_value('active')


# parse descriptor with "minimum" constraint'
field <- Field$new(descriptor = list(name = "length", type = "integer", 
                   constraints = list(minimum = 100)))

field$testValue(200)
field$testValue(50)


# parse descriptor with "maximum" constraint'
field <- Field$new(descriptor = list(name = "length", type = "integer", 
                   constraints = list(maximum = 100)))

field$testValue(50)
field$testValue(200)

}
\seealso{
\href{https://specs.frictionlessdata.io//table-schema/#field-descriptors}{Field Descriptors Specifications}
}
\keyword{data}
