% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schema.R
\docType{class}
\name{Schema}
\alias{Schema}
\title{Schema class}
\format{
\code{\link{R6Class}} object.
}
\usage{
# Schema$load(descriptor, strict = FALSE)
}
\arguments{
\item{descriptor}{A schema descriptor; can be a JSON string, URL, or local file.}

\item{strict}{Logical flag. If \code{TRUE}, validation errors are raised immediately; if \code{FALSE}, they are stored in \code{schema$errors}.}
}
\value{
Object of class \code{\link{R6Class}}.
}
\description{
A model of a Table Schema with helpful methods for working with the schema and supported data.
Schema instances can be initialized using a schema source, either as a URL to a JSON file or as a JSON object.
The schema is validated upon initialization (see \href{https://github.com/okgreece/tableschema-r#validate}{validate}).
By default, validation errors are stored in \code{$errors}, but in strict mode, they are raised immediately.
}
\section{Methods}{

\describe{
  \item{\code{Schema$new(descriptor = descriptor, strict = strict)}}{Use \code{Schema$load} to instantiate a \code{Schema} class.}

  \item{\code{getField(name)}}{Returns a schema field by name.
    \describe{
      \item{\code{name}}{String. Name of the schema field.}
      \item{Returns}{A \code{Field} instance if found, or \code{NULL}.}
    }
  }

  \item{\code{addField(descriptor)}}{Adds a new field to the schema.
    \describe{
      \item{\code{descriptor}}{A list representing the field descriptor.}
      \item{Raises}{\code{TableSchemaError} if the field is invalid.}
      \item{Returns}{The added \code{Field} instance, or \code{NULL} if unsuccessful.}
    }
  }

  \item{\code{removeField(name)}}{Removes a field by name from the schema.
    \describe{
      \item{\code{name}}{Name of the field to remove.}
      \item{Raises}{\code{TableSchemaError} if removal causes invalid schema.}
      \item{Returns}{The removed \code{Field} instance, or \code{NULL}.}
    }
  }

  \item{\code{castRow(row)}}{Casts a row of values based on field types and formats.
    \describe{
      \item{\code{row}}{A list representing a data row.}
      \item{Returns}{The cast row as a list of typed values.}
    }
  }

  \item{\code{infer(rows, headers = 1)}}{Infers schema from given data.
    \describe{
      \item{\code{rows}}{A list of lists representing data rows.}
      \item{\code{headers}}{Either a row number (index) of headers or a list of header names.}
      \item{Returns}{A schema descriptor as an object.}
    }
  }

  \item{\code{commit(strict)}}{Finalizes schema updates.
    \describe{
      \item{\code{strict}}{Logical. Whether to enable strict validation mode.}
      \item{Raises}{\code{TableSchemaError} on failure.}
      \item{Returns}{\code{TRUE} on success; \code{FALSE} if not modified.}
    }
  }

  \item{\code{save(target)}}{Saves schema descriptor to a file.
    \describe{
      \item{\code{target}}{File path to save the schema.}
      \item{Raises}{\code{TableSchemaError} on failure.}
      \item{Returns}{\code{TRUE} on success.}
    }
  }
}
}

\section{Properties}{

\describe{
  \item{\code{valid}}{Returns \code{TRUE} if schema is valid. Always \code{TRUE} in strict mode.}
  \item{\code{errors}}{Returns list of validation errors. Empty in strict mode.}
  \item{\code{descriptor}}{Returns the full schema descriptor as a list.}
  \item{\code{primaryKey}}{Returns a vector of field names that compose the primary key.}
  \item{\code{foreignKeys}}{Returns a list of foreign key definitions.}
  \item{\code{fields}}{Returns list of \code{Field} instances.}
  \item{\code{fieldNames}}{Returns vector of field names.}
}
}

\section{Language}{

The key words \code{MUST}, \code{MUST NOT}, \code{REQUIRED}, \code{SHALL}, \code{SHALL NOT},
\code{SHOULD}, \code{SHOULD NOT}, \code{RECOMMENDED}, \code{MAY}, and \code{OPTIONAL}
in this documentation are interpreted as described in \href{https://www.ietf.org/rfc/rfc2119.txt}{RFC 2119}.
}

\seealso{
\code{Schema$load},
\href{https://specs.frictionlessdata.io//table-schema/}{Table Schema Specifications}
}
\keyword{data}
