% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/table.R
\docType{class}
\name{Table}
\alias{Table}
\title{Table Class}
\format{
\code{\link{R6Class}} object.
}
\usage{
# Table$load(source, schema = NULL, strict = FALSE, headers = 1, ...)
}
\arguments{
\item{source}{Data source. Can be one of:
\describe{
  \item{String}{Path to a local CSV file or a URL to a remote CSV file.}
  \item{List of lists}{Each sublist represents a row.}
  \item{Connection}{A readable stream with CSV content.}
  \item{Function}{Function returning a readable stream.}
}}

\item{schema}{Optional. Schema object or schema descriptor as JSON, list, or URL.}

\item{strict}{Logical. If \code{TRUE}, validation errors raise immediately. If \code{FALSE}, errors are stored in \code{$errors}.}

\item{headers}{Data source headers. Can be:
\describe{
  \item{Integer}{Row number containing the headers.}
  \item{List}{Vector of header names if the data does not contain a header row.}
}}

\item{...}{Additional options passed to the CSV parser.
See \href{https://csv.js.org/parse/options/}{CSV Parser Options}. By default, \code{ltrim} is \code{TRUE}
according to the \href{https://specs.frictionlessdata.io//csv-dialect/#specification}{CSV Dialect spec}.}
}
\value{
Object of class \code{\link{R6Class}}.
}
\description{
Table class for working with tabular data and associated schema.
A table is created from a data source and optionally a schema. It provides methods
for iteration, reading, inference, validation, and saving of tabular data.
}
\section{Methods}{

\describe{
  \item{\code{Table$new(source, schema, strict, headers)}}{Use \code{Table$load} to instantiate a Table object.}

  \item{\code{iter(keyed, extended, cast = TRUE, relations = FALSE, stream = FALSE)}}{Iterates over table rows.
  \describe{
    \item{\code{keyed}}{Logical. Whether to return rows as named lists.}
    \item{\code{extended}}{Logical. Whether to include row metadata.}
    \item{\code{cast}}{Logical. Whether to cast data to schema types.}
    \item{\code{relations}}{List of foreign key references (named list of resource names with reference rows).}
    \item{\code{stream}}{Logical. Return an R stream if \code{TRUE}.}
  }}

  \item{\code{read(keyed, extended, cast = TRUE, relations = FALSE, limit)}}{Reads and returns the entire table as rows.
  \describe{
    \item{\code{keyed}}{Logical. Whether to return keyed rows.}
    \item{\code{extended}}{Logical. Whether to include row metadata.}
    \item{\code{cast}}{Logical. Whether to cast values.}
    \item{\code{relations}}{List of foreign key references (see \code{iter}).}
    \item{\code{limit}}{Integer. Maximum number of rows to return.}
  }}

  \item{\code{infer(limit = 100)}}{Infers the schema from the data.
  \describe{
    \item{\code{limit}}{Integer. Number of rows to use for inference.}
  }}

  \item{\code{save(target)}}{Saves the table as a CSV file.
  \describe{
    \item{\code{target}}{File path to save to.}
  }}
}
}

\section{Properties}{

\describe{
  \item{\code{headers}}{Returns headers detected or provided.}
  \item{\code{schema}}{Returns the associated Schema instance.}
}
}

\section{Details}{

A table is a fundamental concept in tabular data management. It represents rows and columns of structured data,
often accompanied by a schema (metadata describing field types, constraints, etc.).

The \emph{physical representation} of a table refers to the raw data (e.g., in CSV or JSON form).
The \emph{logical representation} corresponds to the parsed and typed values conforming to schema definitions.

This class supports both representations, applying validation, constraint checking, and conversion between them.

Internally, the package uses:
\itemize{
  \item \href{https://CRAN.R-project.org/package=jsonlite}{jsonlite} for JSON parsing to and from R lists.
  \item \href{https://CRAN.R-project.org/package=future}{future} for asynchronous loading (e.g., \code{future::value(future_obj)}).
}

See the examples in function documentation for how to use these features with `tableschema.r`.
}

\section{Language}{

The key words \code{MUST}, \code{MUST NOT}, \code{REQUIRED}, \code{SHALL}, \code{SHALL NOT},
\code{SHOULD}, \code{SHOULD NOT}, \code{RECOMMENDED}, \code{MAY}, and \code{OPTIONAL}
in this documentation are interpreted as described in \href{https://www.ietf.org/rfc/rfc2119.txt}{RFC 2119}.
}

\seealso{
\code{Table$load},
\href{https://specs.frictionlessdata.io//table-schema/}{Table Schema Specifications}
}
\keyword{data}
